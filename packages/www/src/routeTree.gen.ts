/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createServerRootRoute } from '@tanstack/react-start/server'

import { Route as rootRouteImport } from './routes/__root'
import { Route as LayoutRouteImport } from './routes/_layout'
import { Route as AuthedRouteImport } from './routes/_authed'
import { Route as LayoutIndexRouteImport } from './routes/_layout.index'
import { Route as AuthedSettingsRouteImport } from './routes/_authed.settings'
import { Route as LayoutAuthedConversationConversationIDRouteImport } from './routes/_layout._authed.conversation.$conversationID'
import { ServerRoute as ApiProviderServerRouteImport } from './routes/api.provider'
import { ServerRoute as ApiConversationServerRouteImport } from './routes/api.conversation'
import { ServerRoute as ApiConversationConversationIDServerRouteImport } from './routes/api.conversation.$conversationID'
import { ServerRoute as ApiAuthSplatServerRouteImport } from './routes/api.auth.$'

const rootServerRouteImport = createServerRootRoute()

const LayoutRoute = LayoutRouteImport.update({
  id: '/_layout',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthedRoute = AuthedRouteImport.update({
  id: '/_authed',
  getParentRoute: () => rootRouteImport,
} as any)
const LayoutIndexRoute = LayoutIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => LayoutRoute,
} as any)
const AuthedSettingsRoute = AuthedSettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => AuthedRoute,
} as any)
const LayoutAuthedConversationConversationIDRoute =
  LayoutAuthedConversationConversationIDRouteImport.update({
    id: '/_authed/conversation/$conversationID',
    path: '/conversation/$conversationID',
    getParentRoute: () => LayoutRoute,
  } as any)
const ApiProviderServerRoute = ApiProviderServerRouteImport.update({
  id: '/api/provider',
  path: '/api/provider',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiConversationServerRoute = ApiConversationServerRouteImport.update({
  id: '/api/conversation',
  path: '/api/conversation',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiConversationConversationIDServerRoute =
  ApiConversationConversationIDServerRouteImport.update({
    id: '/$conversationID',
    path: '/$conversationID',
    getParentRoute: () => ApiConversationServerRoute,
  } as any)
const ApiAuthSplatServerRoute = ApiAuthSplatServerRouteImport.update({
  id: '/api/auth/$',
  path: '/api/auth/$',
  getParentRoute: () => rootServerRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/settings': typeof AuthedSettingsRoute
  '/': typeof LayoutIndexRoute
  '/conversation/$conversationID': typeof LayoutAuthedConversationConversationIDRoute
}
export interface FileRoutesByTo {
  '/settings': typeof AuthedSettingsRoute
  '/': typeof LayoutIndexRoute
  '/conversation/$conversationID': typeof LayoutAuthedConversationConversationIDRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_authed': typeof AuthedRouteWithChildren
  '/_layout': typeof LayoutRouteWithChildren
  '/_authed/settings': typeof AuthedSettingsRoute
  '/_layout/': typeof LayoutIndexRoute
  '/_layout/_authed/conversation/$conversationID': typeof LayoutAuthedConversationConversationIDRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/settings' | '/' | '/conversation/$conversationID'
  fileRoutesByTo: FileRoutesByTo
  to: '/settings' | '/' | '/conversation/$conversationID'
  id:
    | '__root__'
    | '/_authed'
    | '/_layout'
    | '/_authed/settings'
    | '/_layout/'
    | '/_layout/_authed/conversation/$conversationID'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  AuthedRoute: typeof AuthedRouteWithChildren
  LayoutRoute: typeof LayoutRouteWithChildren
}
export interface FileServerRoutesByFullPath {
  '/api/conversation': typeof ApiConversationServerRouteWithChildren
  '/api/provider': typeof ApiProviderServerRoute
  '/api/auth/$': typeof ApiAuthSplatServerRoute
  '/api/conversation/$conversationID': typeof ApiConversationConversationIDServerRoute
}
export interface FileServerRoutesByTo {
  '/api/conversation': typeof ApiConversationServerRouteWithChildren
  '/api/provider': typeof ApiProviderServerRoute
  '/api/auth/$': typeof ApiAuthSplatServerRoute
  '/api/conversation/$conversationID': typeof ApiConversationConversationIDServerRoute
}
export interface FileServerRoutesById {
  __root__: typeof rootServerRouteImport
  '/api/conversation': typeof ApiConversationServerRouteWithChildren
  '/api/provider': typeof ApiProviderServerRoute
  '/api/auth/$': typeof ApiAuthSplatServerRoute
  '/api/conversation/$conversationID': typeof ApiConversationConversationIDServerRoute
}
export interface FileServerRouteTypes {
  fileServerRoutesByFullPath: FileServerRoutesByFullPath
  fullPaths:
    | '/api/conversation'
    | '/api/provider'
    | '/api/auth/$'
    | '/api/conversation/$conversationID'
  fileServerRoutesByTo: FileServerRoutesByTo
  to:
    | '/api/conversation'
    | '/api/provider'
    | '/api/auth/$'
    | '/api/conversation/$conversationID'
  id:
    | '__root__'
    | '/api/conversation'
    | '/api/provider'
    | '/api/auth/$'
    | '/api/conversation/$conversationID'
  fileServerRoutesById: FileServerRoutesById
}
export interface RootServerRouteChildren {
  ApiConversationServerRoute: typeof ApiConversationServerRouteWithChildren
  ApiProviderServerRoute: typeof ApiProviderServerRoute
  ApiAuthSplatServerRoute: typeof ApiAuthSplatServerRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_layout': {
      id: '/_layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof LayoutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authed': {
      id: '/_authed'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_layout/': {
      id: '/_layout/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof LayoutIndexRouteImport
      parentRoute: typeof LayoutRoute
    }
    '/_authed/settings': {
      id: '/_authed/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof AuthedSettingsRouteImport
      parentRoute: typeof AuthedRoute
    }
    '/_layout/_authed/conversation/$conversationID': {
      id: '/_layout/_authed/conversation/$conversationID'
      path: '/conversation/$conversationID'
      fullPath: '/conversation/$conversationID'
      preLoaderRoute: typeof LayoutAuthedConversationConversationIDRouteImport
      parentRoute: typeof LayoutRoute
    }
  }
}
declare module '@tanstack/react-start/server' {
  interface ServerFileRoutesByPath {
    '/api/provider': {
      id: '/api/provider'
      path: '/api/provider'
      fullPath: '/api/provider'
      preLoaderRoute: typeof ApiProviderServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/conversation': {
      id: '/api/conversation'
      path: '/api/conversation'
      fullPath: '/api/conversation'
      preLoaderRoute: typeof ApiConversationServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/conversation/$conversationID': {
      id: '/api/conversation/$conversationID'
      path: '/$conversationID'
      fullPath: '/api/conversation/$conversationID'
      preLoaderRoute: typeof ApiConversationConversationIDServerRouteImport
      parentRoute: typeof ApiConversationServerRoute
    }
    '/api/auth/$': {
      id: '/api/auth/$'
      path: '/api/auth/$'
      fullPath: '/api/auth/$'
      preLoaderRoute: typeof ApiAuthSplatServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
  }
}

interface AuthedRouteChildren {
  AuthedSettingsRoute: typeof AuthedSettingsRoute
}

const AuthedRouteChildren: AuthedRouteChildren = {
  AuthedSettingsRoute: AuthedSettingsRoute,
}

const AuthedRouteWithChildren =
  AuthedRoute._addFileChildren(AuthedRouteChildren)

interface LayoutRouteChildren {
  LayoutIndexRoute: typeof LayoutIndexRoute
  LayoutAuthedConversationConversationIDRoute: typeof LayoutAuthedConversationConversationIDRoute
}

const LayoutRouteChildren: LayoutRouteChildren = {
  LayoutIndexRoute: LayoutIndexRoute,
  LayoutAuthedConversationConversationIDRoute:
    LayoutAuthedConversationConversationIDRoute,
}

const LayoutRouteWithChildren =
  LayoutRoute._addFileChildren(LayoutRouteChildren)

interface ApiConversationServerRouteChildren {
  ApiConversationConversationIDServerRoute: typeof ApiConversationConversationIDServerRoute
}

const ApiConversationServerRouteChildren: ApiConversationServerRouteChildren = {
  ApiConversationConversationIDServerRoute:
    ApiConversationConversationIDServerRoute,
}

const ApiConversationServerRouteWithChildren =
  ApiConversationServerRoute._addFileChildren(
    ApiConversationServerRouteChildren,
  )

const rootRouteChildren: RootRouteChildren = {
  AuthedRoute: AuthedRouteWithChildren,
  LayoutRoute: LayoutRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
const rootServerRouteChildren: RootServerRouteChildren = {
  ApiConversationServerRoute: ApiConversationServerRouteWithChildren,
  ApiProviderServerRoute: ApiProviderServerRoute,
  ApiAuthSplatServerRoute: ApiAuthSplatServerRoute,
}
export const serverRouteTree = rootServerRouteImport
  ._addFileChildren(rootServerRouteChildren)
  ._addFileTypes<FileServerRouteTypes>()
